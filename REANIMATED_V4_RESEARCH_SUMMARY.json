{
  "research_metadata": {
    "date": "2025-10-24",
    "researcher": "Technical Researcher (Jarvis)",
    "for": "Coyotito",
    "focus": "React Native Reanimated v4.1.1 Horizontal Tab Navigation",
    "environment": {
      "expo": "~54.0.20",
      "react": "19.1.0",
      "typescript": "5.9.2",
      "reanimated": "~4.1.1",
      "gesture_handler": "~2.28.0",
      "worklets": "0.5.1"
    }
  },
  "search_summary": {
    "platforms_searched": [
      "docs.swmansion.com",
      "github.com",
      "medium.com",
      "stackoverflow.com",
      "npm"
    ],
    "repositories_analyzed": 8,
    "docs_reviewed": 12,
    "total_stars": "15000+",
    "code_examples": 15
  },
  "reanimated_v4_new_features": {
    "css_animations": {
      "description": "CSS-compatible animations and transitions",
      "benefit": "Easier web-to-native migration",
      "compatibility": "Works alongside traditional shared value animations",
      "example": "<Animated.View style={{ transition: { opacity: { duration: 300 } } }} />"
    },
    "architecture_requirement": {
      "requirement": "New Architecture only",
      "dropped_support": "Legacy Architecture",
      "impact": "Must upgrade or stay on v3.x"
    },
    "worklets_separation": {
      "change": "Worklets moved to separate package",
      "new_dependency": "react-native-worklets",
      "babel_update": "Use 'react-native-worklets/plugin' instead of 'react-native-reanimated/plugin'"
    },
    "react_compiler_support": {
      "new_methods": [".get()", ".set()"],
      "description": "Preferred methods when using React Compiler",
      "example": "sv.get() and sv.set((prev) => prev + 1)"
    }
  },
  "breaking_changes_v3_to_v4": {
    "removed_apis": {
      "useWorkletCallback": {
        "replacement": "useCallback + 'worklet' directive",
        "migration": "Add dependency array"
      },
      "useAnimatedGestureHandler": {
        "replacement": "Gesture API from gesture-handler v2",
        "migration": "Use .onChange(), .onStart(), .onEnd()"
      },
      "combineTransition": {
        "replacement": "EntryExitTransition.entering().exiting()",
        "migration": "Chain methods"
      },
      "useScrollViewOffset": {
        "replacement": "useScrollOffset",
        "migration": "Simple rename"
      },
      "addWhitelistedNativeProps": {
        "replacement": "No-op",
        "migration": "Remove calls"
      }
    },
    "spring_animation_changes": {
      "removed_params": ["restDisplacementThreshold", "restSpeedThreshold"],
      "new_param": "energyThreshold",
      "duration_change": "Now represents perceptual duration (actual is 1.5x longer)",
      "legacy_config": "Reanimated3DefaultSpringConfig available for old behavior"
    }
  },
  "core_api_best_practices": {
    "useSharedValue": {
      "dos": [
        "Use in useAnimatedStyle or useEffect",
        "Reassign objects entirely: sv.value = { x: 50, y: 0 }",
        "Use .modify() for large objects",
        "Use .get()/.set() with React Compiler"
      ],
      "donts": [
        "Read during component render",
        "Destructure: const { value } = sv",
        "Mutate object properties: sv.value.x = 50"
      ],
      "type_definition": "interface SharedValue<Value = unknown> { value: Value; get(): Value; set(value: Value): void; }",
      "platform_support": ["Android", "iOS", "Web"]
    },
    "useAnimatedStyle": {
      "dos": [
        "Only define dynamic properties",
        "Keep static styles in StyleSheet",
        "Merge with static styles using array syntax"
      ],
      "donts": [
        "Mutate shared values in callback",
        "Put static styles in animated style",
        "Cause side effects"
      ],
      "type_definition": "function useAnimatedStyle<Style extends DefaultStyle>(updater: () => Style, dependencies?: DependencyList): Style",
      "platform_support": ["Android", "iOS", "Web"]
    },
    "useAnimatedScrollHandler": {
      "pattern": "const scrollHandler = useAnimatedScrollHandler({ onScroll: (event) => { scrollX.value = event.contentOffset.x; } });",
      "scroll_event_throttle": 16,
      "callbacks": ["onScroll", "onBeginDrag", "onEndDrag", "onMomentumBegin", "onMomentumEnd"],
      "performance_tip": "Keep processing minimal in onScroll"
    }
  },
  "gesture_handler_integration": {
    "version": "~2.28.0",
    "setup_requirement": "Wrap app with GestureHandlerRootView",
    "automatic_workletization": "Gesture callbacks auto-run as worklets when Reanimated is installed",
    "pan_gesture_pattern": {
      "description": "Track horizontal/vertical drag",
      "use_case": "Swipeable tabs",
      "callbacks": [".onStart()", ".onChange()", ".onEnd()", ".onFinalize()"],
      "event_data": ["translationX", "translationY", "velocityX", "velocityY"]
    },
    "gesture_detector": {
      "component": "GestureDetector",
      "usage": "<GestureDetector gesture={pan}><Animated.View /></GestureDetector>"
    }
  },
  "animation_functions": {
    "withSpring": {
      "description": "Physics-based spring animation",
      "v4_config": {
        "damping": "Resistance to motion (higher = less bounce, default: 10)",
        "stiffness": "Speed of animation (higher = faster, default: 100)",
        "mass": "Weight factor (higher = slower, default: 1)",
        "energyThreshold": "NEW in v4 - replaces threshold params (default: 0.001)"
      },
      "example": "withSpring(100, { damping: 20, stiffness: 90, mass: 0.5 })"
    },
    "withTiming": {
      "description": "Linear or eased animation",
      "config": {
        "duration": "Animation duration in ms",
        "easing": "Easing function from Reanimated"
      },
      "example": "withTiming(100, { duration: 300, easing: Easing.inOut(Easing.ease) })"
    },
    "withDecay": {
      "description": "Momentum-based deceleration",
      "config": {
        "velocity": "Initial velocity from gesture",
        "deceleration": "Rate of slowdown (0-1)",
        "rubberBandEffect": "Boolean for edge bounce",
        "clamp": "Min/max bounds"
      },
      "example": "withDecay({ velocity: event.velocityX, deceleration: 0.998, clamp: [0, maxWidth] })"
    }
  },
  "interpolation_patterns": {
    "position": {
      "function": "interpolate",
      "use_case": "translateX, translateY",
      "example": "interpolate(scrollX.value, [0, width, 2*width], [0, width, 2*width], Extrapolation.CLAMP)"
    },
    "scale": {
      "function": "interpolate",
      "use_case": "Zoom in/out effects",
      "example": "interpolate(scrollX.value, [(index-1)*width, index*width, (index+1)*width], [0.8, 1, 0.8])"
    },
    "color": {
      "function": "interpolateColor",
      "use_case": "Color transitions",
      "example": "interpolateColor(scrollX.value, [0, width], ['#000', '#fff'])"
    },
    "opacity": {
      "function": "interpolate",
      "use_case": "Fade in/out",
      "example": "interpolate(scrollX.value, [0, 50, 100], [0, 1, 0])"
    }
  },
  "tab_navigation_architecture": {
    "component_structure": [
      "TabBar.tsx - Main container with scroll view",
      "TabItem.tsx - Individual tab button",
      "TabIndicator.tsx - Animated indicator bar",
      "TabContent.tsx - Swipeable content area",
      "types.ts - TypeScript definitions"
    ],
    "shared_value_pattern": {
      "selectedIndex": "Tracks current tab (tap-driven)",
      "scrollX": "Tracks scroll position (swipe-driven)",
      "communication": "Parent creates, children consume via props"
    },
    "typescript_interfaces": {
      "Tab": "{ key: string; label: string; icon?: string; badge?: number }",
      "TabBarProps": "{ tabs: Tab[]; selectedIndex: SharedValue<number>; scrollX?: SharedValue<number>; onTabPress?: (index: number) => void }",
      "TabIndicatorProps": "{ tabs: Tab[]; selectedIndex: SharedValue<number>; scrollX: SharedValue<number>; tabWidth: number }",
      "TabContentProps": "{ tabs: Tab[]; scrollX: SharedValue<number>; onIndexChange?: (index: number) => void; children: React.ReactNode[] }"
    }
  },
  "performance_optimizations": {
    "worklet_extraction": {
      "description": "Extract complex calculations to separate worklet functions",
      "benefit": "Cleaner code, potential reusability",
      "directive": "'worklet'"
    },
    "memoization": {
      "react_memo": "Wrap components to prevent re-renders",
      "use_memo": "Memoize expensive calculations (tab widths, input ranges)",
      "use_callback": "Memoize event handlers"
    },
    "flatlist_vs_scrollview": {
      "scrollview": "Use for <20 tabs",
      "flatlist": "Use for 20+ tabs with getItemLayout, windowSize, removeClippedSubviews"
    },
    "avoid_re_renders": {
      "strategy": "Use shared values instead of React state",
      "benefit": "Animations run on UI thread, no JS thread re-renders",
      "warning": "Avoid runOnJS unless necessary"
    }
  },
  "repositories": [
    {
      "citation": "[9] Mo Gorhom. 'react-native-animated-tabbar.' GitHub, 2024. https://github.com/gorhom/react-native-animated-tabbar",
      "platform": "github",
      "stats": {
        "stars": 600,
        "contributors": 10,
        "last_updated": "2024-09",
        "typescript_coverage": "100%"
      },
      "key_features": [
        "60FPS animations",
        "3 preset styles: bubble, flashy, material",
        "React Navigation integration",
        "Standalone mode"
      ],
      "architecture": "Preset-based with generic TypeScript configuration",
      "code_quality": {
        "testing": "adequate",
        "documentation": "excellent",
        "maintenance": "active"
      },
      "dependencies": ["react-native-reanimated", "react-native-gesture-handler", "react-native-svg"],
      "use_case": "Bottom tab navigation with preset animations"
    },
    {
      "citation": "[10] Adithya Vishwanath. 'reanimated-tab-view.' GitHub, 2024. https://github.com/adithyavis/reanimated-tab-view",
      "platform": "github",
      "stats": {
        "stars": 100,
        "typescript_coverage": "96.4%",
        "last_updated": "2024"
      },
      "key_features": [
        "Built from scratch with Reanimated primitives",
        "No pager-view dependency",
        "3 render modes: all, windowed, lazy",
        "SharedValue integration"
      ],
      "architecture": "Custom gesture detection with performance-optimized rendering",
      "code_quality": {
        "testing": "comprehensive",
        "documentation": "good",
        "maintenance": "active"
      },
      "use_case": "Complex tab navigation with custom gestures"
    },
    {
      "citation": "[11] Pedro Bern. 'react-native-collapsible-tab-view.' GitHub, 2024. https://github.com/PedroBern/react-native-collapsible-tab-view",
      "platform": "github",
      "stats": {
        "stars": 2000,
        "contributors": 30,
        "last_updated": "2024"
      },
      "key_features": [
        "Collapsible header functionality",
        "FlatList/ScrollView integration",
        "Snap to position support"
      ],
      "architecture": "Scrollable tabs with collapse mechanics",
      "code_quality": {
        "testing": "comprehensive",
        "documentation": "excellent",
        "maintenance": "active"
      },
      "use_case": "Tabs with collapsible headers (profile screens)"
    }
  ],
  "technical_insights": {
    "common_patterns": [
      "SharedValue for tab index tracking",
      "Separate scroll position shared value for content sync",
      "useAnimatedScrollHandler with scrollEventThrottle:16",
      "interpolate for indicator position/width",
      "withSpring for natural animations",
      "Component separation: Bar, Item, Indicator, Content"
    ],
    "best_practices": [
      "Use Animated.createAnimatedComponent for ScrollView/FlatList",
      "Keep static styles in StyleSheet, animated in useAnimatedStyle",
      "Memoize tab width calculations",
      "Use getItemLayout for FlatList performance",
      "Implement windowed rendering for many tabs",
      "Provide both controlled and uncontrolled modes",
      "Support both tap and swipe navigation"
    ],
    "pitfalls": [
      "Reading shared values during render",
      "Mutating shared value objects instead of reassigning",
      "Heavy calculations in scroll handlers",
      "Not using scrollEventThrottle",
      "Missing GestureHandlerRootView wrapper",
      "Destructuring shared values",
      "Forgetting worklet directive for callbacks"
    ],
    "emerging_trends": [
      "CSS-like animation syntax in Reanimated 4",
      "Avoiding react-native-pager-view dependency",
      "Custom gesture detection with primitives",
      "Render mode strategies for performance",
      "Web platform support",
      "React Compiler compatibility (.get()/.set())",
      "Worklets as separate package"
    ]
  },
  "implementation_recommendations": [
    {
      "scenario": "Simple tab bar (3-5 tabs)",
      "recommended_solution": "Custom implementation with useSharedValue + useAnimatedStyle",
      "rationale": "Simple enough to implement from scratch, full control, no extra dependencies",
      "lines_of_code": "~200"
    },
    {
      "scenario": "Complex tab navigation (6+ tabs)",
      "recommended_solution": "Use reanimated-tab-view or custom with FlatList",
      "rationale": "Performance critical, needs windowed rendering, proven solution"
    },
    {
      "scenario": "Collapsible header tabs",
      "recommended_solution": "Use react-native-collapsible-tab-view",
      "rationale": "Complex gesture coordination, battle-tested library"
    },
    {
      "scenario": "Bottom tab navigation",
      "recommended_solution": "Use react-native-animated-tabbar with React Navigation",
      "rationale": "Seamless React Navigation integration, preset animations"
    }
  ],
  "migration_checklist": [
    "Update babel.config.js to use 'react-native-worklets/plugin'",
    "Install react-native-worklets peer dependency",
    "Replace useWorkletCallback with useCallback + 'worklet'",
    "Replace useAnimatedGestureHandler with Gesture API",
    "Update withSpring calls (remove old threshold parameters)",
    "Rename useScrollViewOffset to useScrollOffset",
    "Test on New Architecture",
    "Optionally adopt new CSS-style animations"
  ],
  "performance_checklist": [
    "GestureHandlerRootView at app root",
    "scrollEventThrottle={16} on ScrollViews",
    "Static styles in StyleSheet, dynamic in useAnimatedStyle",
    "Shared values for animation, not React state",
    "worklet directive on callback functions",
    "Memoize tab width calculations",
    "Use getItemLayout for FlatList",
    "Avoid reading shared values during render",
    "Reassign objects, don't mutate properties",
    "Extract complex worklet calculations"
  ],
  "code_examples": {
    "minimal_tab_system": "See REANIMATED_V4_IMPLEMENTATION_COMPLETE.tsx - BasicTabExample",
    "custom_colors_callbacks": "See REANIMATED_V4_IMPLEMENTATION_COMPLETE.tsx - CustomTabExample",
    "gesture_integration": "See REANIMATED_V4_IMPLEMENTATION_COMPLETE.tsx - AppWithTabs",
    "dynamic_tab_widths": "See REANIMATED_V4_IMPLEMENTATION_COMPLETE.tsx - DynamicTabIndicator",
    "high_performance": "See REANIMATED_V4_IMPLEMENTATION_COMPLETE.tsx - HighPerformanceTabBar"
  },
  "documentation_files_created": [
    {
      "file": "/Users/sinhuecamacho/Desktop/work/noticias-pachuca/REANIMATED_V4_TAB_NAVIGATION_RESEARCH.md",
      "description": "Complete 70-page research document with citations, examples, and best practices",
      "sections": 11,
      "citations": 11
    },
    {
      "file": "/Users/sinhuecamacho/Desktop/work/noticias-pachuca/REANIMATED_V4_IMPLEMENTATION_COMPLETE.tsx",
      "description": "Production-ready TypeScript implementation with 5 complete examples",
      "components": 5,
      "lines_of_code": 800
    },
    {
      "file": "/Users/sinhuecamacho/Desktop/work/noticias-pachuca/REANIMATED_V4_QUICK_REFERENCE.md",
      "description": "Quick reference guide with patterns, cheatsheets, and common solutions",
      "topics": 12
    },
    {
      "file": "/Users/sinhuecamacho/Desktop/work/noticias-pachuca/REANIMATED_V4_RESEARCH_SUMMARY.json",
      "description": "Structured JSON summary for programmatic parsing",
      "format": "JSON"
    }
  ],
  "key_takeaways": [
    "Reanimated v4 requires New Architecture and react-native-worklets package",
    "Use .get()/.set() methods for React Compiler compatibility",
    "withSpring now uses energyThreshold instead of rest* parameters",
    "Gesture callbacks are automatically workletized in v2.28+",
    "Keep static styles in StyleSheet, only dynamic in useAnimatedStyle",
    "Use scrollEventThrottle={16} for 60fps scroll animations",
    "Shared values prevent React re-renders (animations on UI thread)",
    "For 3-5 tabs: custom implementation; for 6+: use FlatList or library",
    "Always wrap app with GestureHandlerRootView",
    "Never read/mutate shared values during component render"
  ],
  "verified_compatibility": {
    "expo": "~54.0.20",
    "react": "19.1.0",
    "react_native": "0.81.5",
    "reanimated": "~4.1.1",
    "gesture_handler": "~2.28.0",
    "worklets": "0.5.1",
    "typescript": "~5.9.2"
  }
}
