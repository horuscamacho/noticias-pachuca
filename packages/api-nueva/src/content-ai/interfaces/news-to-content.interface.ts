/**
 * üì∞ Interfaces espec√≠ficas para flujo de noticias ‚Üí contenido AI
 * Flujo simplificado con estructura est√°tica
 */

export type EditorialLine = 'neutral' | 'izquierda' | 'derecha' | 'cr√≠tica';

/**
 * üéØ Request principal para generar contenido desde noticias
 */
export interface NewsToContentRequest {
  title: string; // T√≠tulo de la noticia original (obligatorio)
  content: string; // Contenido de la noticia original (obligatorio)
  templateId: string; // ID del template/agente a usar (obligatorio)
  referenceContent?: string; // Contenido de referencia para contexto pol√≠tico (opcional)
  priority?: number; // Prioridad del job (1-10, default: 5)
  description?: string; // Descripci√≥n del trabajo
}

/**
 * üèóÔ∏è Output estandarizado que SIEMPRE debe devolver el AI
 */
export interface StandardizedAIOutput {
  title: string; // T√≠tulo reescrito por el agente
  content: string; // Contenido transformado por el agente
  keywords: string[]; // Keywords SEO generadas (m√≠nimo 3, m√°ximo 10)
  tags: string[]; // Tags relevantes (m√≠nimo 2, m√°ximo 8)
  category: string; // Categor√≠a asignada autom√°ticamente
  summary: string; // Resumen ejecutivo (m√°ximo 200 caracteres)
}

/**
 * ü§ñ Configuraci√≥n espec√≠fica del agente editorial
 */
export interface AgentConfiguration {
  editorialLine: EditorialLine; // L√≠nea editorial del agente
  politicalIntensity: number; // Intensidad pol√≠tica 0-100%
  agentPersonality: string; // Personalidad espec√≠fica del agente
  canHandlePolitics: boolean; // Si puede manejar contenido pol√≠tico
  requiresReference: boolean; // Si requiere contenido de referencia obligatorio
}

/**
 * üîß Estructura est√°tica obligatoria para prompts
 */
export interface StaticPromptStructure {
  inputStructure: {
    title: string; // Siempre recibe t√≠tulo
    content: string; // Siempre recibe contenido
    referenceContent?: string; // Opcional: contenido de referencia
  };
  outputStructure: StandardizedAIOutput; // Formato de salida fijo
  agentConfig: AgentConfiguration; // Configuraci√≥n del agente
}

/**
 * üìã Response del endpoint de generaci√≥n
 */
export interface NewsToContentResponse {
  jobId: string; // ID del trabajo de generaci√≥n
  status: 'pending' | 'processing' | 'completed' | 'failed';
  generatedContent?: StandardizedAIOutput; // Contenido generado (si est√° completo)
  originalInput: {
    title: string;
    content: string;
    referenceContent?: string;
  };
  templateUsed: {
    id: string;
    name: string;
    agentPersona: string;
  };
  processing: {
    startedAt?: Date;
    completedAt?: Date;
    processingTime?: number; // ms
    tokensUsed?: number;
    cost?: number;
  };
  errors?: string[];
  warnings?: string[];
}

/**
 * ‚úÖ Validaci√≥n de request
 */
export interface NewsToContentValidation {
  isValid: boolean;
  errors: string[];
  warnings: string[];
  templateInfo: {
    exists: boolean;
    isActive: boolean;
    canHandlePolitics: boolean;
    requiresReference: boolean;
  };
  estimatedCost?: number;
  estimatedProcessingTime?: number; // ms
}

/**
 * üîç Filtros para buscar contenido generado desde noticias
 */
export interface NewsGeneratedContentFilters {
  templateId?: string;
  editorialLine?: EditorialLine;
  dateFrom?: Date;
  dateTo?: Date;
  category?: string;
  hasErrors?: boolean;
  status?: 'pending' | 'processing' | 'completed' | 'failed';
}

/**
 * üìä Estad√≠sticas de generaci√≥n de contenido
 */
export interface ContentGenerationStats {
  totalGenerated: number;
  byEditorialLine: Record<EditorialLine, number>;
  byCategory: Record<string, number>;
  averageProcessingTime: number; // ms
  successRate: number; // 0-100%
  totalCost: number;
  averageCost: number;
  topTemplates: Array<{
    templateId: string;
    name: string;
    usageCount: number;
    successRate: number;
  }>;
}