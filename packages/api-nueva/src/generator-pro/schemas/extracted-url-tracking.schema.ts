import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document, Types } from 'mongoose';

/**
 * Interface para m√©todos del documento
 */
export interface ExtractedUrlTrackingMethods {
  markAsQueued(): Promise<ExtractedUrlTrackingDocument>;
  markAsProcessing(): Promise<ExtractedUrlTrackingDocument>;
  markAsCompleted(extractedNoticiaId?: Types.ObjectId, processingTime?: number): Promise<ExtractedUrlTrackingDocument>;
  markAsFailed(reason: string): Promise<ExtractedUrlTrackingDocument>;
  updateLastSeen(): Promise<ExtractedUrlTrackingDocument>;
}

export type ExtractedUrlTrackingDocument = ExtractedUrlTracking & Document & ExtractedUrlTrackingMethods;

/**
 * üîó Schema para trackear URLs extra√≠das y evitar duplicados
 *
 * Prop√≥sito:
 * - Guardar todas las URLs extra√≠das de listados
 * - Detectar URLs duplicadas
 * - Trackear estado de procesamiento de cada URL
 * - Permitir re-extracci√≥n despu√©s de X d√≠as (contenido actualizado)
 */
@Schema({ timestamps: true })
export class ExtractedUrlTracking {
  // ========================================
  // üîë IDENTIFICACI√ìN
  // ========================================

  @Prop({ required: true, type: Types.ObjectId, ref: 'NewsWebsiteConfig', index: true })
  websiteConfigId: Types.ObjectId; // Sitio del que se extrajo

  @Prop({ required: true, trim: true, index: true })
  url: string; // URL completa de la noticia

  @Prop({ required: true, trim: true, index: true })
  urlHash: string; // Hash SHA-256 de la URL (para b√∫squedas r√°pidas)

  @Prop({ required: true, trim: true })
  domain: string; // Dominio extra√≠do de la URL

  // ========================================
  // üìä ESTADO DE PROCESAMIENTO
  // ========================================

  @Prop({
    required: true,
    enum: ['discovered', 'queued', 'processing', 'completed', 'failed', 'skipped'],
    default: 'discovered',
    index: true,
  })
  status: 'discovered' | 'queued' | 'processing' | 'completed' | 'failed' | 'skipped';

  @Prop()
  queuedAt?: Date; // Cu√°ndo se agreg√≥ a la cola

  @Prop()
  processedAt?: Date; // Cu√°ndo se proces√≥ completamente

  @Prop({ type: String })
  failureReason?: string; // Raz√≥n de fallo si status = 'failed'

  // ========================================
  // üîç METADATA DE EXTRACCI√ìN
  // ========================================

  @Prop({ required: true })
  firstDiscoveredAt: Date; // Primera vez que se descubri√≥

  @Prop({ required: true })
  lastSeenAt: Date; // √öltima vez que apareci√≥ en el listado

  @Prop({ default: 1 })
  timesDiscovered: number; // Cu√°ntas veces ha aparecido en listados

  @Prop({ type: String })
  title?: string; // T√≠tulo si se pudo extraer del listado

  @Prop({ type: String })
  imageUrl?: string; // Imagen si se pudo extraer del listado

  // ========================================
  // üîÑ CONTROL DE RE-EXTRACCI√ìN
  // ========================================

  @Prop({ default: false })
  allowReExtraction: boolean; // ¬øPermitir re-extraer despu√©s de X d√≠as?

  @Prop({ default: 30 })
  reExtractionDays: number; // D√≠as despu√©s de los cuales se puede re-extraer (default: 30)

  @Prop()
  nextReExtractionAllowedAt?: Date; // Cu√°ndo se permite re-extraer

  // ========================================
  // üìù REFERENCIAS
  // ========================================

  @Prop({ type: Types.ObjectId, ref: 'ExtractedNoticia' })
  extractedNoticiaId?: Types.ObjectId; // Referencia a contenido extra√≠do (si existe)

  @Prop({ type: Types.ObjectId, ref: 'AIContentGeneration' })
  generatedContentId?: Types.ObjectId; // Referencia a contenido generado (si existe)

  @Prop({ type: Types.ObjectId, ref: 'PublishedNoticia' })
  publishedNoticiaId?: Types.ObjectId; // Referencia a noticia publicada (si existe)

  // ========================================
  // üìä M√âTRICAS
  // ========================================

  @Prop({ default: 0 })
  extractionAttempts: number; // Intentos de extracci√≥n

  @Prop()
  lastExtractionAttempt?: Date;

  @Prop({ type: Number })
  processingTime?: number; // Tiempo de procesamiento (ms)

  // ========================================
  // üîß METADATA
  // ========================================

  @Prop({ default: Date.now })
  createdAt: Date;

  @Prop({ default: Date.now })
  updatedAt: Date;
}

export const ExtractedUrlTrackingSchema = SchemaFactory.createForClass(ExtractedUrlTracking);

// ========================================
// üìá √çNDICES
// ========================================

// √çndice √∫nico: Un sitio no puede tener la misma URL dos veces
ExtractedUrlTrackingSchema.index(
  { websiteConfigId: 1, urlHash: 1 },
  { unique: true },
);

// √çndices de b√∫squeda
ExtractedUrlTrackingSchema.index({ url: 1 });
ExtractedUrlTrackingSchema.index({ domain: 1, status: 1 });
ExtractedUrlTrackingSchema.index({ status: 1, createdAt: -1 });
ExtractedUrlTrackingSchema.index({ websiteConfigId: 1, status: 1, lastSeenAt: -1 });

// √çndice para re-extracci√≥n
ExtractedUrlTrackingSchema.index({
  status: 1,
  allowReExtraction: 1,
  nextReExtractionAllowedAt: 1,
});

// ========================================
// üîß M√âTODOS
// ========================================

ExtractedUrlTrackingSchema.methods.markAsQueued = function (): Promise<ExtractedUrlTrackingDocument> {
  this.status = 'queued';
  this.queuedAt = new Date();
  return this.save();
};

ExtractedUrlTrackingSchema.methods.markAsProcessing = function (): Promise<ExtractedUrlTrackingDocument> {
  this.status = 'processing';
  this.extractionAttempts += 1;
  this.lastExtractionAttempt = new Date();
  return this.save();
};

ExtractedUrlTrackingSchema.methods.markAsCompleted = function (
  extractedNoticiaId?: Types.ObjectId,
  processingTime?: number,
): Promise<ExtractedUrlTrackingDocument> {
  this.status = 'completed';
  this.processedAt = new Date();
  if (extractedNoticiaId) {
    this.extractedNoticiaId = extractedNoticiaId;
  }
  if (processingTime) {
    this.processingTime = processingTime;
  }
  // Calcular pr√≥xima re-extracci√≥n si est√° habilitada
  if (this.allowReExtraction) {
    this.nextReExtractionAllowedAt = new Date(
      Date.now() + this.reExtractionDays * 24 * 60 * 60 * 1000,
    );
  }
  return this.save();
};

ExtractedUrlTrackingSchema.methods.markAsFailed = function (reason: string): Promise<ExtractedUrlTrackingDocument> {
  this.status = 'failed';
  this.failureReason = reason;
  this.processedAt = new Date();
  return this.save();
};

ExtractedUrlTrackingSchema.methods.updateLastSeen = function (): Promise<ExtractedUrlTrackingDocument> {
  this.lastSeenAt = new Date();
  this.timesDiscovered += 1;
  return this.save();
};
