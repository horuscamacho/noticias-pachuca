name: Deploy Frontend (TanStack Start)

on:
  push:
    branches: [main]
    paths:
      - 'packages/public-noticias/**'
      - '.github/workflows/deploy-frontend.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Runner IP
        id: ip
        run: echo "runner_ip=$(curl -s https://api.ipify.org)" >> $GITHUB_OUTPUT

      - name: Add Runner IP to Security Group
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.runner_ip }}/32 \
            --region ${{ secrets.AWS_REGION }} || echo "Rule might already exist"

      - name: Setup Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22.20.0'
          cache: 'yarn'
          cache-dependency-path: 'packages/public-noticias/yarn.lock'

      - name: Install dependencies
        working-directory: packages/public-noticias
        run: yarn install

      - name: Build application
        working-directory: packages/public-noticias
        run: yarn build
        env:
          NODE_OPTIONS: --max-old-space-size=4096
          VITE_API_URL: https://api.noticiaspachuca.com/api
          VITE_SITE_NAME: Noticias Pachuca
          VITE_SITE_URL: https://noticiaspachuca.com
          VITE_SITE_DESCRIPTION: Las noticias más relevantes de Pachuca y Hidalgo

      - name: Create deployment package
        working-directory: packages/public-noticias
        run: |
          tar -czf frontend-deploy.tar.gz .output package.json

      - name: Verify deployment package
        working-directory: packages/public-noticias
        run: |
          echo "Deployment package created:"
          ls -lh frontend-deploy.tar.gz
          echo "Current directory: $(pwd)"

      - name: Cleanup EC2 disk space
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/ec2_key.pem
          chmod 600 /tmp/ec2_key.pem

          # Create cleanup script content
          cat > /tmp/cleanup.sh << 'CLEANUP_EOF'
          #!/bin/bash
          set -e
          echo "========================================="
          echo "EC2 Disk Cleanup - Pre-Deployment"
          echo "========================================="
          echo "BEFORE CLEANUP:"
          df -h / | grep -v Filesystem
          echo ""

          # Clean old deployment artifacts in /tmp
          echo "Cleaning old deployment artifacts..."
          find /tmp -name "*.tar.gz" -type f -mtime +1 -delete 2>/dev/null || true
          find /tmp -name "*-deploy.tar.gz" -type f -delete 2>/dev/null || true

          # Clean PM2 logs older than 7 days
          echo "Cleaning old PM2 logs..."
          if [ -d "$HOME/.pm2/logs" ]; then
            find $HOME/.pm2/logs -type f -mtime +7 -delete 2>/dev/null || true
          fi

          # Clean system package cache
          echo "Cleaning system package cache..."
          sudo apt-get clean 2>/dev/null || sudo yum clean all 2>/dev/null || true

          # Clean Docker resources if installed
          if command -v docker &> /dev/null; then
            echo "Cleaning Docker resources..."
            docker image prune -f 2>/dev/null || true
            docker container prune -f --filter "until=24h" 2>/dev/null || true
          fi

          # Clean temporary files older than 7 days
          echo "Cleaning temporary files..."
          find /tmp -type f -mtime +7 -not -path "*/systemd*" -not -path "*/ssh*" -delete 2>/dev/null || true

          # Clean yarn/npm cache
          yarn cache clean 2>/dev/null || true
          npm cache clean --force 2>/dev/null || true

          # Clean system logs
          sudo journalctl --vacuum-time=3d 2>/dev/null || true

          echo ""
          echo "AFTER CLEANUP:"
          df -h / | grep -v Filesystem
          echo "========================================="
          echo "Cleanup completed!"
          CLEANUP_EOF

          # Copy and execute cleanup script
          scp -i /tmp/ec2_key.pem \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            /tmp/cleanup.sh \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/cleanup.sh

          ssh -i /tmp/ec2_key.pem \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
            "chmod +x /tmp/cleanup.sh && /tmp/cleanup.sh && rm /tmp/cleanup.sh"

          rm -f /tmp/ec2_key.pem /tmp/cleanup.sh

      - name: Copy to EC2
        working-directory: packages/public-noticias
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/ec2_key.pem
          chmod 600 /tmp/ec2_key.pem

          # Test SSH connection first
          ssh -i /tmp/ec2_key.pem \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
            "echo 'SSH connection successful' && mkdir -p /tmp"

          # Copy file with verbose output
          scp -i /tmp/ec2_key.pem \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -v \
            frontend-deploy.tar.gz \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/frontend-deploy.tar.gz

          # Cleanup key
          rm -f /tmp/ec2_key.pem

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e

            # Extract deployment
            cd /var/www/noticias-pachuca/packages/public-noticias
            tar -xzf /tmp/frontend-deploy.tar.gz

            # Update .env
            echo "${{ secrets.FRONTEND_ENV }}" > .env

            # Reload with PM2
            pm2 reload /var/www/noticias-pachuca/ecosystem.config.js --only public-noticias || pm2 start /var/www/noticias-pachuca/ecosystem.config.js --only public-noticias

            # Health check
            sleep 15
            curl -f http://localhost:3000 || exit 1

            echo "✅ Frontend deployment successful"

      - name: Remove Runner IP from Security Group
        if: always()
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.runner_ip }}/32 \
            --region ${{ secrets.AWS_REGION }} || echo "Rule already removed"
