name: Deploy API (NestJS)

on:
  push:
    branches: [main]
    paths:
      - 'packages/api-nueva/**'
      - '.github/workflows/deploy-api.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Runner IP
        id: ip
        run: echo "runner_ip=$(curl -s https://api.ipify.org)" >> $GITHUB_OUTPUT

      - name: Add Runner IP to Security Group
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.runner_ip }}/32 \
            --region ${{ secrets.AWS_REGION }} || echo "Rule might already exist"

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: 'packages/api-nueva/yarn.lock'

      - name: Install dependencies
        working-directory: packages/api-nueva
        run: yarn install --frozen-lockfile --production=false

      - name: Build application
        working-directory: packages/api-nueva
        run: yarn build
        env:
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Create deployment package
        working-directory: packages/api-nueva
        run: |
          mkdir -p deploy-pkg
          cp -r dist deploy-pkg/
          cp package.json deploy-pkg/
          cp yarn.lock deploy-pkg/
          tar -czf api-deploy.tar.gz -C deploy-pkg .

      - name: Verify deployment package
        working-directory: packages/api-nueva
        run: |
          echo "Deployment package created:"
          ls -lh api-deploy.tar.gz
          echo "Current directory: $(pwd)"

      - name: Cleanup EC2 disk space
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/ec2_key.pem
          chmod 600 /tmp/ec2_key.pem

          # Create cleanup script content
          cat > /tmp/cleanup.sh << 'CLEANUP_EOF'
          #!/bin/bash
          set -e
          echo "========================================="
          echo "EC2 Disk Cleanup - Pre-Deployment"
          echo "========================================="
          echo "BEFORE CLEANUP:"
          df -h / | grep -v Filesystem
          echo ""

          # Clean old deployment artifacts in /tmp
          echo "Cleaning old deployment artifacts..."
          find /tmp -name "*.tar.gz" -type f -mtime +1 -delete 2>/dev/null || true
          find /tmp -name "*-deploy.tar.gz" -type f -delete 2>/dev/null || true

          # Clean PM2 logs older than 7 days
          echo "Cleaning old PM2 logs..."
          if [ -d "$HOME/.pm2/logs" ]; then
            find $HOME/.pm2/logs -type f -mtime +7 -delete 2>/dev/null || true
          fi

          # Clean system package cache
          echo "Cleaning system package cache..."
          sudo apt-get clean 2>/dev/null || sudo yum clean all 2>/dev/null || true

          # Clean Docker resources if installed
          if command -v docker &> /dev/null; then
            echo "Cleaning Docker resources..."
            docker image prune -f 2>/dev/null || true
            docker container prune -f --filter "until=24h" 2>/dev/null || true
          fi

          # Clean temporary files older than 7 days
          echo "Cleaning temporary files..."
          find /tmp -type f -mtime +7 -not -path "*/systemd*" -not -path "*/ssh*" -delete 2>/dev/null || true

          # Clean yarn/npm cache
          yarn cache clean 2>/dev/null || true
          npm cache clean --force 2>/dev/null || true

          # Clean system logs
          sudo journalctl --vacuum-time=3d 2>/dev/null || true

          echo ""
          echo "AFTER CLEANUP:"
          df -h / | grep -v Filesystem
          echo "========================================="
          echo "Cleanup completed!"
          CLEANUP_EOF

          # Copy and execute cleanup script
          scp -i /tmp/ec2_key.pem \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            /tmp/cleanup.sh \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/cleanup.sh

          ssh -i /tmp/ec2_key.pem \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
            "chmod +x /tmp/cleanup.sh && /tmp/cleanup.sh && rm /tmp/cleanup.sh"

          rm -f /tmp/ec2_key.pem /tmp/cleanup.sh

      - name: Copy to EC2
        working-directory: packages/api-nueva
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/ec2_key.pem
          chmod 600 /tmp/ec2_key.pem

          # Test SSH connection first
          ssh -i /tmp/ec2_key.pem \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
            "echo 'SSH connection successful' && mkdir -p /tmp"

          # Copy file with verbose output
          scp -i /tmp/ec2_key.pem \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -v \
            api-deploy.tar.gz \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/api-deploy.tar.gz

          # Cleanup key
          rm -f /tmp/ec2_key.pem

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e

            # Extract deployment
            cd /var/www/noticias-pachuca/packages/api-nueva
            tar -xzf /tmp/api-deploy.tar.gz

            # Install production dependencies (skip Puppeteer Chrome download)
            PUPPETEER_SKIP_DOWNLOAD=true yarn install --frozen-lockfile --production

            # Update .env using heredoc for reliable multiline handling
            cat > .env << 'ENV_EOF'
            ${{ secrets.API_ENV }}
            ENV_EOF

            # Verify .env file was created and has content
            echo "Verifying .env file creation..."
            if [ ! -s .env ]; then
              echo "❌ .env file is empty or does not exist"
              ls -lh .env 2>/dev/null || echo "File does not exist"
              exit 1
            fi

            echo "✅ .env file created ($(wc -l < .env) lines, $(stat -f%z .env 2>/dev/null || stat -c%s .env) bytes)"

            # Verify critical environment variables exist
            MISSING_VARS=()
            for var in MONGODB_URL PORT NODE_ENV; do
              if ! grep -q "^${var}=" .env; then
                MISSING_VARS+=("$var")
              fi
            done

            if [ ${#MISSING_VARS[@]} -ne 0 ]; then
              echo "❌ Missing required environment variables: ${MISSING_VARS[*]}"
              echo ""
              echo "First 10 lines of .env (for debugging):"
              head -10 .env | sed 's/=.*/=***/' # Mask values for security
              echo ""
              echo "Variables found in .env:"
              grep -E "^[A-Z_]+=" .env | cut -d= -f1 || echo "No variables found"
              exit 1
            fi

            echo "✅ All critical environment variables verified"

            # Reload with PM2 (zero-downtime)
            echo "Reloading application with PM2..."
            pm2 reload /var/www/noticias-pachuca/ecosystem.config.js --only api-nueva || pm2 start /var/www/noticias-pachuca/ecosystem.config.js --only api-nueva

            # Wait for NestJS application to start (15 seconds)
            echo "Waiting for application to start..."
            sleep 15

            # Check PM2 process status first
            echo "Checking PM2 process status..."
            pm2 describe api-nueva || {
              echo "❌ PM2 process not found"
              pm2 list
              exit 1
            }

            # Verify app is online in PM2
            PM2_STATUS=$(pm2 jlist | jq -r '.[] | select(.name=="api-nueva") | .pm2_env.status')
            echo "PM2 Status: $PM2_STATUS"

            if [ "$PM2_STATUS" != "online" ]; then
              echo "❌ PM2 status is not 'online'. Showing logs..."
              pm2 logs api-nueva --lines 50 --nostream
              exit 1
            fi

            # HTTP Health check with retries (3 attempts, 5 seconds apart)
            echo "Running HTTP health check..."
            HEALTH_CHECK_PASSED=false
            for i in {1..3}; do
              echo "Health check attempt $i/3..."
              if curl -f -s --max-time 5 http://localhost:4000/health > /dev/null 2>&1; then
                echo "✅ Health check passed on attempt $i"
                HEALTH_CHECK_PASSED=true
                break
              else
                echo "⚠️  Health check attempt $i failed"
                if [ $i -lt 3 ]; then
                  echo "Waiting 5 seconds before retry..."
                  sleep 5
                fi
              fi
            done

            # If health check failed, show diagnostics
            if [ "$HEALTH_CHECK_PASSED" = false ]; then
              echo "❌ Health check failed after 3 attempts. Running diagnostics..."
              echo ""
              echo "=== PM2 Process Info ==="
              pm2 describe api-nueva
              echo ""
              echo "=== PM2 Logs (last 100 lines) ==="
              pm2 logs api-nueva --lines 100 --nostream
              echo ""
              echo "=== Network Check ==="
              netstat -tlnp | grep :4000 || echo "No process listening on port 4000"
              echo ""
              echo "=== Process List ==="
              pm2 list
              exit 1
            fi

            echo "✅ API deployment successful"

      - name: Remove Runner IP from Security Group
        if: always()
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.runner_ip }}/32 \
            --region ${{ secrets.AWS_REGION }} || echo "Rule already removed"
